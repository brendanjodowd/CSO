str_extract("(?<=DB_).*")
extract_links <-  function(link_address){
webpage <- read_html(paste(link_address)) %>% html_nodes(".row") %>% html_nodes("a")
titles <- tibble(webpage %>% html_text() )
names(titles) <- "Item"
titles <- titles %>% filter(Item!="Table" & Item != "JSON")
titles$Page.Code <- link_address %>%
str_extract(".*(?=&SPtext)") %>%
str_extract("(?<=DB_).*")
titles
}
#cso_database is from the web-scraping.
cso_database <- unnest(tibble(map(cso_links_vec , extract_links)))
cso_database$Short.Code <- cso_database$Item %>% str_extract("^.{1,8}- " ) %>%
str_replace("[:punct:]","") %>% str_replace("[:blank:]","")
cso_database <- full_join(cso_links , cso_database , by="Page.Code")
cso_database <- select(cso_database , -V4)
names(cso_database) <- c("Theme", "Section" , "Subsection", "Page.Code", "Title","Short.Code")
cso_database <- cso_database[c("Theme", "Section" , "Subsection","Title",
"Page.Code", "Short.Code")]
devtools::use_data(cso_database , overwrite = TRUE )
roxygen2::roxygenize()
devtools::install_github("brendanjodowd/CSO")
library(CSO)
the_database <- cso_database
View(the_database)
source('~/R/CSO/R/building_database.R', echo=TRUE)
View(cso_links)
cso_links <- read.csv("~/R/CSO/cso_links.csv", header=FALSE)
cso_links_vec <- pull(cso_links[4], V4)
cso_links$Page.Code <- cso_links$V4 %>%
str_extract(".*(?=&SPtext)") %>%
str_extract("(?<=DB_).*")
for(i in 2:nrow(cso_links)){
if(cso_links$V1[i]=""){
cso_links$V1[i]=so_links$V1[i-1]
}
if(cso_links$V2[i]=""){
cso_links$V2[i]=cso_links$V2[i-1]
}
if(cso_links$V3[i]=""){
cso_links$V3[i]=cso_links$V3[i-1]
}
}
for(i in 2:nrow(cso_links)){
if(cso_links$V1[i]=""){
cso_links$V1[i] <- cso_links$V1[i-1]
}
if(cso_links$V2[i]=""){
cso_links$V2[i] <- cso_links$V2[i-1]
}
if(cso_links$V3[i]=""){
cso_links$V3[i] <- cso_links$V3[i-1]
}
}
for(i in 2:nrow(cso_links)){
if(cso_links$V1[i]=""){
cso_links$V1[i] <- cso_links$V1[i-1]
}
# if(cso_links$V2[i]=""){
#   cso_links$V2[i] <- cso_links$V2[i-1]
# }
# if(cso_links$V3[i]=""){
#   cso_links$V3[i] <- cso_links$V3[i-1]
# }
}
cso_links$V1[3]
cso_links$V1[1]
for(i in 2:nrow(cso_links)){
if(cso_links$V1[i]=""){
cso_links$V1[i] <- cso_links$V1[i-1]
}
}
for(i in 2:nrow(cso_links)){
if(cso_links$V1[i]=""){
cso_links$V1[i] <- cso_links$V1[i-1]
}
}
for(i in 2:nrow(cso_links)){
if(cso_links$V1[i]==""){
cso_links$V1[i] <- cso_links$V1[i-1]
}
}
cso_links <- read.csv("~/R/CSO/cso_links.csv", header=FALSE)
cso_links_vec <- pull(cso_links[4], V4)
cso_links$Page.Code <- cso_links$V4 %>%
str_extract(".*(?=&SPtext)") %>%
str_extract("(?<=DB_).*")
for(i in 2:nrow(cso_links)){
if(cso_links$V1[i]==""){
cso_links$V1[i] <- cso_links$V1[i-1]
}
if(cso_links$V2[i]=""){
cso_links$V2[i] <- cso_links$V2[i-1]
}
if(cso_links$V3[i]=""){
cso_links$V3[i] <- cso_links$V3[i-1]
}
}
cso_links <- read.csv("~/R/CSO/cso_links.csv", header=FALSE)
cso_links_vec <- pull(cso_links[4], V4)
cso_links$Page.Code <- cso_links$V4 %>%
str_extract(".*(?=&SPtext)") %>%
str_extract("(?<=DB_).*")
for(i in 2:nrow(cso_links)){
if(cso_links$V1[i]==""){
cso_links$V1[i] <- cso_links$V1[i-1]
}
if(cso_links$V2[i]==""){
cso_links$V2[i] <- cso_links$V2[i-1]
}
if(cso_links$V3[i]==""){
cso_links$V3[i] <- cso_links$V3[i-1]
}
}
source('~/R/CSO/R/building_database.R', echo=TRUE)
source('~/R/CSO/R/building_database.R', echo=TRUE)
source('~/R/CSO/R/building_database.R', echo=TRUE)
devtools::install_github("brendanjodowd/CSO")
source('~/R/CSO/R/building_database.R', echo=TRUE)
devtools::install_github("brendanjodowd/CSO")
library(CSO)
mydata <- get_cso("AIA30")
View(mydata)
the_database <- cso_database
View(the_database)
table(the_database$Theme)
source('~/R/CSO/R/get_cso.R', echo=TRUE)
mydata <- get_cso("AIA30")
library(CSO)
library(CSO)
mydata <- get_cso("BBA01")
print(first.line.of.text)
print(first.line.of.text)
source('~/.active-rstudio-document', echo=TRUE)
roxygenize()
roxygenize
?roxygen
?roxygenize
library(roxygen2)
roxygenize()
detach("httr", unload=TRUE)
detach("rjstat", unload=TRUE)
detach("stringr", unload=TRUE)
detach(httr, unload=TRUE)
detach(package:httr, unload=TRUE)
detach(package:stringr, unload=TRUE)
detach(package:rjstat, unload=TRUE)
library(rjstat)
detach(package:rjstat, unload=TRUE)
devtools::install_github("brendanjodowd/CSO")
library(CSO)
mydata <- get_cso("BBA01")
devtools::install_github("brendanjodowd/CSO")
rm(statbank)
rm(get_cso)
devtools::install_github("brendanjodowd/CSO")
library(CSO)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
library(CSO)
mydata <- get_cso("BBA01")
mydata <- get_cso("muck")
detach(package:rjstat, unload=TRUE)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
library(CSO)
mydata <- get_cso("muck")
devtools::install_github("brendanjodowd/CSO", force=TRUE)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
library(CSO)
?CSO
??CSO
packageDescription("CSO")
?get_cso
?statbank
?detach
?statbank
help(get_cso)
help("summarise")
help("get_cso")
library(CSO)
help(get_cso)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
library(CSO)
mydata <- get_cso("muck")
mydata <- get_cso("muck")
detach(package:rjstat, unload=TRUE)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
roxygenize()
source('~/.active-rstudio-document', echo=TRUE)
library(rvest)
library(purrr)
library(tidyr)
library(dplyr)
library(stringr)
source('~/.active-rstudio-document', echo=TRUE)
View(statbank)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
library(CSO)
help("get_cso")
packageDescription(CSO)
packageDescription("CSO")
devtools::install_github("brendanjodowd/CSO", force=TRUE)
library(CSO)
packageDescription("CSO")
?get_cso
the_database <- statbank
View(the_database)
packageDescription("CSO")
library(installr)
install.packages("installer")
install.packages("installr")
remove.packages("rjstat")
library(rjstat)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
mydata <- get_cso("muck")
library(CSO)
mydata <- get_cso("muck")
mydata <- get_cso("BRA13")
library(rgdal)
getwd
getwd()
setwd("/home/brendan/R")
getwd()
counties <- readOGR(dsn="counties" , "Admin_Counties_Generalised_50m")
counties <- fortify(counties, region="COUNTY")
library(ggplot2)
counties <- fortify(counties, region="COUNTY")
View(counties)
unique(counties$id)
counties <- readOGR(dsn="counties" , "Admin_Counties_Generalised_50m")
#this gives you 26 counties
countiesX <- fortify(counties, region="ENGLISH")
View(countiesX)
unique(countiesX$id)
View(statbank)
sample <- get_cso("EY013")
sample <- get_cso("EY015")
#cso_links is the file from the CSV. The short codes here are correct!
cso_links <- read.csv("~/R/CSO/cso_links.csv", header=FALSE)
devtools::install_github("brendanjodowd/CSO", force=TRUE)
library(CSO)
mydata <- get_cso("EY015")
getwd
getwd()
some_map <- readOGR(dsn="Administrative_Counties_Generalised_100m__OSi_National_Administrative_Boundaries_" ,
layer="Administrative_Counties_Generalised_100m__OSi_National_Administrative_Boundaries_")
library(rgdal)
library(rgdal)
library(CSO)
library(stringr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
pop <- get_cso("E1062")
pop <- pop %>%
filter(Census.Year=="2016") %>%
filter(str_detect(Statistic, "Total")) %>%
filter(str_detect(Period.in.which.Built, "later"))
some_map <- readOGR(dsn="Administrative_Counties_Generalised_100m__OSi_National_Administrative_Boundaries_" ,
layer="Administrative_Counties_Generalised_100m__OSi_National_Administrative_Boundaries_")
map_counties <- fortify(some_map , region="COUNTY")
map_cities <- fortify(some_map , region="ENGLISH")
some_map <- readOGR(dsn="County_Boundary_Generalised_100M__OSi_National_Statutory_Boundaries" ,
layer="County_Boundary_Generalised_100M__OSi_National_Statutory_Boundaries")
admin_counties <- fortify(some_map , region="ENGLISH")
admin_counties <- fortify(some_map , region="FIRST_CO_E")
View(admin_counties)
table(admin_counties$id)
admin_counties <- fortify(some_map , region="FIRST_COUN")
table(admin_counties$id)
some_map <- readOGR(dsn="County_Boundary_Generalised_100M__OSi_National_Statutory_Boundaries" ,
layer="County_Boundary_Generalised_100M__OSi_National_Statutory_Boundaries")
counties <- fortify(some_map , region="FIRST_COUN")
some_map <- readOGR(dsn="Administrative_Counties_Generalised_100m__OSi_National_Administrative_Boundaries_" ,
layer="Administrative_Counties_Generalised_100m__OSi_National_Administrative_Boundaries_")
admin_counties <- fortify(some_map , region="ENGLISH")
table(admin_counties$id)
table(counties$id)
counties$id <- counties$id %>%
str_to_title() %>%
trimws()
counties$id <- counties$id %>%
str_to_title() %>%
trimws()
admin_counties$id <- admin_counties$id %>%
str_to_title() %>%
str_replace("Council","") %>% str_replace("And","and") %>% str_replace("Dun","DÃºn") %>%
ifelse((str_detect(.,"Cork") | str_detect(.,"Water")|str_detect(.,"Limerick")|str_detect(.,"Galway")) ,
.,
. <- str_replace(.,"County",""))  %>%
trimws()
names(admin_counties)[6] <-  "County.and.City"
names(counties)[6] <-  "County"
map_data <- inner_join(counties, pop , by="County.and.City")
ggplot(map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2()
ggplot(map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2()
no_axes <- "theme(panel.grid = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())"
ggplot(map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2()
library(rgdal)
library(CSO)
library(stringr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
pop <- get_cso("E1062")
library(rgdal)
library(CSO)
library(stringr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
pop <- get_cso("E1062")
pop <- pop %>%
filter(Census.Year=="2016") %>%
filter(str_detect(Statistic, "Total")) %>%
filter(str_detect(Period.in.which.Built, "later"))
some_map <- readOGR(dsn="County_Boundary_Generalised_100M__OSi_National_Statutory_Boundaries" ,
layer="County_Boundary_Generalised_100M__OSi_National_Statutory_Boundaries")
counties <- fortify(some_map , region="FIRST_COUN")
some_map <- readOGR(dsn="Administrative_Counties_Generalised_100m__OSi_National_Administrative_Boundaries_" ,
layer="Administrative_Counties_Generalised_100m__OSi_National_Administrative_Boundaries_")
admin_counties <- fortify(some_map , region="ENGLISH")
counties$id <- counties$id %>%
str_to_title() %>%
trimws()
admin_counties$id <- admin_counties$id %>%
str_to_title() %>%
str_replace("Council","") %>% str_replace("And","and") %>% str_replace("Dun","DÃºn") %>%
ifelse((str_detect(.,"Cork") | str_detect(.,"Water")|str_detect(.,"Limerick")|str_detect(.,"Galway")) ,
.,
. <- str_replace(.,"County",""))  %>%
trimws()
names(admin_counties)[6] <-  "County.and.City"
names(counties)[6] <-  "County"
map_data <- inner_join(counties, pop , by="County.and.City")
no_axes <- "theme(panel.grid = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())"
ggplot(map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2()
map_data <- inner_join(counties, pop , by="County.and.City")
map_data <- inner_join(admin_counties, pop , by="County.and.City")
ggplot(map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2()
map_data_2 <- map_data
map_data_2$new_value <- map_data_2$value %/% 500
map_data_2$new_value <- factor(map_data_2$new_value , levels = c(0,1,2,3,4))
table(map_data_2$new_value)
ggplot(map_data_2)+
geom_polygon(aes(long, lat, group = group, fill = new_value), colour = "grey" , lwd=0.5) +
coord_quickmap()+
eval(parse(text = no_axes)) +
scale_fill_brewer(palette = "Blues" ,
labels=c("< 500", "500-1000", "1000-1500", "1500-2000" , "2000+"),
name="One-off Houses built", drop=FALSE)
ggplot(map_data_2)+
geom_polygon(aes(long, lat, group = group, fill = factor(new_value , levels = c(0,1,2,3,4))),
colour = "grey" , lwd=0.5) +
coord_quickmap()+
eval(parse(text = no_axes)) +
scale_fill_brewer(palette = "Blues" ,
labels=c("< 500", "500-1000", "1000-1500", "1500-2000" , "2000+"),
name="One-off Houses built" , drop=FALSE)
map_data_2$category <- cut(map_data_2$value,
breaks=seq(0,2500,500),
labels=c("< 500", "500-1000", "1000-1500", "1500-2000", "2000+"))
ggplot(map_data_2)+
geom_polygon(aes(long, lat, group = group, fill = category), colour = "grey" , lwd=0.5) +
coord_quickmap()+
eval(parse(text = no_axes)) +
scale_fill_brewer(palette="Blues", name="One-off Houses built", drop = FALSE)
View(statbank)
look <- filter(statbank , str_detect(statbank$Title, "County"))
View(look)
pop2 <- get_cso("E2049")
pop2 <- get_cso("E2049")
library(rgdal)
library(CSO)
library(stringr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
pop <- get_cso("E1062")
pop <- pop %>%
filter(Census.Year=="2016") %>%
filter(str_detect(Statistic, "Total")) %>%
filter(str_detect(Period.in.which.Built, "later"))
some_map <- readOGR(dsn="County_Boundary_Generalised_100M__OSi_National_Statutory_Boundaries" ,
layer="County_Boundary_Generalised_100M__OSi_National_Statutory_Boundaries")
counties <- fortify(some_map , region="FIRST_COUN")
some_map <- readOGR(dsn="Administrative_Counties_Generalised_100m__OSi_National_Administrative_Boundaries_" ,
layer="Administrative_Counties_Generalised_100m__OSi_National_Administrative_Boundaries_")
admin_counties <- fortify(some_map , region="ENGLISH")
pop2 <- get_cso("E2049")
View(pop2)
pop2 <- pop2 %>% filter(Age.Group=="All ages") %>%
spread(Sex, value)
View(pop2)
pop2$value <- pop2$Female/pop2$Male
pop2 <- filter(pop2, Census.Year==2016)
new_map_data <- inner_join(pop2 , counties , by="County")
View(counties)
some_map <- readOGR(dsn="County_Boundary_Generalised_100M__OSi_National_Statutory_Boundaries" ,
layer="County_Boundary_Generalised_100M__OSi_National_Statutory_Boundaries")
counties <- fortify(some_map , region="FIRST_COUN")
some_map <- readOGR(dsn="Administrative_Counties_Generalised_100m__OSi_National_Administrative_Boundaries_" ,
layer="Administrative_Counties_Generalised_100m__OSi_National_Administrative_Boundaries_")
admin_counties <- fortify(some_map , region="ENGLISH")
counties$id <- counties$id %>%
str_to_title() %>%
trimws()
admin_counties$id <- admin_counties$id %>%
str_to_title() %>%
str_replace("Council","") %>% str_replace("And","and") %>% str_replace("Dun","DÃºn") %>%
ifelse((str_detect(.,"Cork") | str_detect(.,"Water")|str_detect(.,"Limerick")|str_detect(.,"Galway")) ,
.,
. <- str_replace(.,"County",""))  %>%
trimws()
names(admin_counties)[6] <-  "County.and.City"
names(counties)[6] <-  "County"
new_map_data <- inner_join(pop2 , counties , by="County")
ggplot(new_map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2()
no_axes <- "theme(panel.grid = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())"
ggplot(new_map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2()
ggplot(new_map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2(low="red", high = "blue", mid = "white", midpoint = 0)
max(new_map_data$value)
min(new_map_data$value)
scale_fill_gradient2(low="red", high = "blue", mid = "white", midpoint = 0 , limits=c(0.95,1.06)
)
ggplot(new_map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2(low="red", high = "blue", mid = "white", midpoint = 0 , limits=c(0.95,1.06))
ggplot(new_map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2(low="red", high = "blue", mid = "white", midpoint = 0 , breaks=c(0.95,1.06))
ggplot(new_map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2(low="red", high = "blue", mid = "white", midpoint = 0 , limits=c(0.95,1.06))
ggplot(new_map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_colour_gradient2(low="red", high = "blue", mid = "white", midpoint = 0 , limits=c(0.95,1.06))
ggplot(new_map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_colour_gradient2(low="red", high = "blue", mid = "white", midpoint = 1 , limits=c(0.95,1.06))
ggplot(new_map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2(low="red", high = "blue", mid = "white", midpoint = 1 , limits=c(0.95,1.06))
min(new_map_data$value)
max(new_map_data$value)
ggplot(new_map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2(low="red", high = "blue", mid = "white", midpoint = 1 , limits=c(0.975,1.05))
ggplot(new_map_data)+
geom_polygon(aes(long, lat, group = group, fill = value), colour = "grey" , lwd=0.5) +
coord_quickmap() + eval(parse(text = no_axes))+
scale_fill_gradient2(low="red", high = "blue", mid = "white", midpoint = 1 , limits=c(0.95,1.05))
look <- filter(statbank , str_detect(statbank$Title, "Electoral"))
View(look)
some_map <- data.frame(rjstat::fromJSONstat(map_url))
map_url <- "https://opendata.arcgis.com/datasets/67b560bcb1804636a8f69236d76b7f20_0.geojson"
some_map <- data.frame(rjstat::fromJSONstat(map_url))
try_map <- rjstat::fromJSONstat(map_url)
try_map <- readOGR(rjstat::fromJSONstat(map_url))
